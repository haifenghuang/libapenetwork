#!/usr/bin/env python2.7

# Copyright 2016 Nidium Inc. All rights reserved.
# Use of this source code is governed by a MIT license
# that can be found in the LICENSE file.

import os

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import Utils
from konstructor import assumeYes
from konstructor import Tests
from konstructor import Log
from konstructor import ROOT

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron("LDFLAGS=%s" % (os.environ.get("LDFLAGS", "")))

if Platform.system == "Windows":
   Platform.setCompiler("cl", "cl")
   Deps.set('pthreads4w')
else:
   Platform.setCompiler("clang", "clang++")
   if Platform.system == "Darwin":
      Platform.setEnviron("MACOSX_DEPLOYMENT_TARGET=10.7")

# We explicitely set "python2.7 gyp_main.py" because "gyp" executable force
# the use of "python" which could be 2.7 or 3 and gyp does not work with python3
Gyp.setExec("python2.7 third-party/gyp/gyp_main.py")

###

@Deps.register("pthreads4w")
def pthreads4w():
    if Platform.system != "Windows":
        Log.error("The '%s' platform has native pthreads" % (Platform.system))
        sys.exit(1)
    model, version = ['VCE', '2']
    platform = ["x86","x64"][Platform.wordSize == 64]
    Platform.setEnviron("TARGET_CPU=%s" % (platform))
    #msvc_version = Variables.get('msvs_version', 2015)
    #setenv = "setenv /%s /%s /Release" % (platform, msvc_version)
    return {
        "location": Deps.GitRepo("https://git.code.sf.net/p/pthreads4w/code", revision="062c8e"),
        "build": [ "nmake realclean %s-static" % (model)],
        "outputs": ["pthread%s%s.lib" %(model, version)]
    }


@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.GitRepo("https://chromium.googlesource.com/external/gyp", revision="4ec6c4e3a94bd04a6da2858163d40b2429b8aad1")
    }

@Deps.register("c-ares")
def cares():
    makefile = ""
    if Platform.system == "Windows":
        return {
                "location" : Deps.GitRepo("https://github.com/c-ares/c-ares.git", tag="cares-1_12_0"),
                "build" : [ "buildconf.bat", "nmake -f Makefile.msvc"],
                "outputs": ["./msvc140/cares/lib-release/libcares.lib"]
        }
    else:
        return {
            "location": "http://c-ares.haxx.se/download/c-ares-1.12.0.tar.gz",
                    "build": ["./configure", "make"],
            "outputs": [".libs/libcares.a"]
        }

@Deps.register("openssl")
def openssl():
    location = "https://github.com/openssl/openssl/archive/OpenSSL_1_0_1t.tar.gz"
    #location = "https://github.com/openssl/openssl/archive/OpenSSL_1_0_1u.tar.gz"
    if Platform.system == "Windows":
        #use no-asm to enable SAFESEH
        if Platform.wordSize == 32:
           build = ["perl Configure VC-WIN32 no-shared enable-static-engine no-asm", r"ms\do_ms"]
        else:
           build = ["perl Configure VC-WIN64A no-shared enable-static-engine no-asm", r"ms\do_win64a"]
        return {
            "location": location,
            "build" :  build + [ r"nmake -f ms\nt.mak"],
            "outputs": ["out32/libeay32.lib", "out32/ssleay32.lib"]
        }
    elif Platform.system == "Darwin":
        build = ["./Configure darwin64-x86_64-cc -no-shared||make depend",
                 "make build_crypto", "make build_ssl"],
    else:
        build = ["./config -fPIC||make depend",
                "make build_crypto", "make build_ssl"]
    return {
        "location": location,
        "build"   : build,
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

@Deps.register("zlib")
def zlip():
    if Platform.system == 'Windows':
        build = ["nmake -f ./win32/Makefile.msc"]
        output = 'zlib.lib'
    else:
        build = ["./configure --static", "make"]
        output = 'libz.a'
    return {
        "location": "%s/zlib-1.2.11.tar.gz" % (DEPEDENCY_REPO),
        "build": build,
        "outputs": [output]
    }

@Deps.register("gperftools")
def gperftools():
    if Platform.system == "Windows":
        Log.error("Can not do gperftools on windows (yet).")
        exit()
    return {
        "location": "https://github.com/gperftools/gperftools/releases/download/gperftools-2.5/gperftools-2.5.tar.gz",
        "build": ["autoconf", "chmod +x ./configure", "./configure --enable-static --enable-shared", "make"],
        "outputs": [".libs/libprofiler.so.0$"]
    }

@Deps.register("pprof")
def pprof():
    from konstructor import ConfigCache
    if Platform.system == "Windows":
        Log.error("Can not do pprof on windows (yet).")
        exit()
    return {
        "location": Deps.Command("GOPATH=%s go get github.com/google/pprof" % (os.path.join(Deps.getDir(), "." + ConfigCache.getConfigStr(), "pprof"))),
        "outputs": [{"src": "bin/pprof", "dst": os.path.join(Deps.getDir(), "pprof", "tools")}]
    }

@Deps.register("gtest")
def gtest():
    build = ["cmake .", "make"]
    outputs = ["googlemock/libgmock.a",
                "googlemock/libgmock_main.a",
                "googlemock/gtest/libgtest.a",
                "googlemock/gtest/libgtest_main.a"]

    if Platform.system == "Darwin":
        build = ["cmake -DCMAKE_CXX_FLAGS='-std=c++11 -stdlib=libc++' .", "make"]
    elif Platform.system == "Windows":
        cmake, platform, toolset = Platform.CMake()
        build = ["cd ./googlemock",
                cmake + " . -DCMAKE_C_FLAGS='/MD' -DCXXFLAGS='/MD'",
                Platform.MsBuild("ALL_BUILD.vcxproj"),
                "cd ..",
                cmake + " . -DCMAKE_C_FLAGS='/MD' -DC_FLAGS='/MD'",
                Platform.MsBuild("ALL_BUILD.vcxproj")]
        outputs = ["googlemock/gtest/Release/gtest.lib",
                "googlemock/gtest/Release/gtest_main.lib",
                "googlemock/Release/gmock.lib",
                "googlemock/Release/gmock_main.lib"]
    return {
        "location": Deps.GitRepo("https://github.com/google/googletest.git", revision="d225acc90bc3a8c420a9bcd1f033033c1ccd7fe0"),
        "build": build,
        "outputs": outputs
    }

#####

@CommandLine.option("--debug", default=False)
def debug(debug):
    if debug:
        Variables.set("debug", True)
        Gyp.setConfiguration("Debug")
        Konstruct.setConfigs(["debug"])

@CommandLine.option("--third-party-path", default="")
def gypConfig(thirdPartyPath):
    if thirdPartyPath:
        Deps.setDir(thirdPartyPath)
        Variables.set("thirdPartyPath", os.path.abspath(thirdPartyPath))
        # Gyp needs a relative path
        Gyp.set("third_party", os.path.relpath(thirdPartyPath))
        Gyp.setExec(os.path.join(thirdPartyPath, "gyp", "gyp"))

@CommandLine.option("--module", default="")
def module(module):
    if not module:
        return

    Deps.set(Deps.Konstruct(module, module + "/configure"))

@CommandLine.option("--unit-tests", nargs="?", const="all", default=None)
def testNetwork(unitTests):
    if not unitTests:
        return

    head, tail = os.path.split(os.getcwd())
    cwd = os.path.dirname(os.path.realpath(__file__))

    #Builder.Gyp.set("asan", 1)

    if unitTests:
        cdir = "../build/tests"
        if Platform.system == "Windows":
            cdir = cdir[1:]
        Gyp.set("unit_test", 1)
        Deps.set("gtest")
        Tests.register([ ("network-unittests", cdir)], builders=[
            Gyp("%s/gyp/network-unittests.gyp" % cwd)])

    @Konstruct.hook("postBuild")
    def runNetworkTest(success):
        exitCode = 0 if Tests.runTest(success) else 4
        Utils.exit(code=exitCode)

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        if Platform.system == "Windows":
            Log.error("Can not do --asan on Visual Studio.")
            exit()
        Gyp.set("asan", 1)

#####

Deps.set("gyp", "c-ares", "openssl", "zlib")
Variables.set("depsRepo", DEPEDENCY_REPO)

@CommandLine.option("--mac-sdk-version", default="")
def macSdkVersion(version):
    if version:
        Gyp.set("mac_sdk_version", version)

def findAppleSDK(type='macosx'):
    import re
    type = type.lower()
    if type not in [ 'macosx', 'iphoneos', 'iphonesimulator']:
        Log.error("Invalid Apple SDK type %s" % type)
        exit()

    cmd = 'xcodebuild -showsdks'
    code, output = Utils.run(cmd, failExit=True, returnOutput=True)
    if code != 0 or output is None:
        return None

    output = output.split("\n")
    sdks = []
    for line in output:
        if type in line:
            v = re.search(type + "([0-9\.]+)", line)
            if v is not None:
                sdks.append(v.group(1))

    return sdks[len(sdks) - 1]

if Platform.system == "Darwin":
    sdk = findAppleSDK()
    if sdk is None:
       Utils.exit("No macos SDK detected. Make sure Xcode is correctly installed and configured")
    Gyp.set("mac_sdk_version", sdk)

if __name__ == '__main__':
    args = "--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi"
    if Platform.system == "Windows":
        Variables.set("msvs_version", 2015)

    Gyp.setArgs(args)
    Build.add(Gyp("gyp/network.gyp"))
    Konstruct.start()

